@model PersonalFinanceTracker.ViewModels.TransactionListViewModel

@{
    ViewData["Title"] = "Transactions";
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="mb-8 animate-fade-in">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Transactions</h1>
                <p class="mt-2 text-gray-600">Track your income and expenses</p>
            </div>
            <a asp-action="Create" class="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200 shadow-sm hover:shadow-md">
                <span class="flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                    </svg>
                    Add Transaction
                </span>
            </a>
        </div>
    </div>

    <!-- Enhanced Filters -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6 animate-slide-in">
        <div class="mb-4">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Filters & Search</h3>
        </div>
        
        <form method="get" id="filterForm">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                <!-- Search -->
                <div class="lg:col-span-2">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Search Description</label>
                    <input type="text" name="searchTerm" value="@Model.SearchTerm" 
                           placeholder="Search by description or notes..." 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                
                <!-- Account Filter -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Account</label>
                    <select name="accountId" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">All Accounts</option>
                        @foreach (var account in Model.Accounts)
                        {
                            <option value="@account.Id" selected="@(Model.SelectedAccountId == account.Id)">@account.Name</option>
                        }
                    </select>
                </div>
                
                <!-- Category Filter -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                    <select name="categoryId" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.Categories)
                        {
                            <option value="@category.Id" selected="@(Model.SelectedCategoryId == category.Id)">@category.Name</option>
                        }
                    </select>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4 mb-4">
                <!-- Type Filter -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
                    <select name="type" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">All Types</option>
                        <option value="Income" selected="@(Model.SelectedType == "Income")">Income</option>
                        <option value="Expense" selected="@(Model.SelectedType == "Expense")">Expense</option>
                    </select>
                </div>
                
                <!-- Date Range -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">From Date</label>
                    <input type="date" name="fromDate" value="@Model.FromDate?.ToString("yyyy-MM-dd")" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">To Date</label>
                    <input type="date" name="toDate" value="@Model.ToDate?.ToString("yyyy-MM-dd")" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                
                <!-- Amount Range -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Min Amount</label>
                    <input type="number" name="minAmount" value="@Model.MinAmount" step="0.01" 
                           placeholder="0.00" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Max Amount</label>
                    <input type="number" name="maxAmount" value="@Model.MaxAmount" step="0.01" 
                           placeholder="9999.99" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                
                <!-- Page Size -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Per Page</label>
                    <select name="pageSize" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="10" selected="@(Model.PageSize == 10)">10</option>
                        <option value="20" selected="@(Model.PageSize == 20)">20</option>
                        <option value="50" selected="@(Model.PageSize == 50)">50</option>
                        <option value="100" selected="@(Model.PageSize == 100)">100</option>
                    </select>
                </div>
            </div>
            
            <div class="flex flex-wrap gap-3">
                <button type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-2 rounded-md transition-colors duration-200 font-medium">
                    <span class="flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                        </svg>
                        Apply Filters
                    </span>
                </button>
                
                <a href="@Url.Action("Index")" class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-md transition-colors duration-200 font-medium">
                    <span class="flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                        Clear All
                    </span>
                </a>
            </div>
            
            <!-- Hidden inputs for sorting -->
            <input type="hidden" name="sortBy" value="@Model.SortBy" />
            <input type="hidden" name="sortDirection" value="@Model.SortDirection" />
        </form>
    </div>

    <!-- Results Summary -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6 animate-slide-in">
        <div class="flex flex-wrap items-center justify-between">
            <div class="flex items-center space-x-6">
                <div class="text-sm text-gray-600">
                    Showing <span class="font-medium">@((Model.CurrentPage - 1) * Model.PageSize + 1)</span> to 
                    <span class="font-medium">@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalRecords)</span> of 
                    <span class="font-medium">@Model.TotalRecords</span> transactions
                </div>
                @if (Model.TotalRecords != Model.Transactions.Count || Model.FromDate.HasValue || Model.ToDate.HasValue || !string.IsNullOrEmpty(Model.SearchTerm))
                {
                    <div class="text-sm text-blue-600 font-medium">
                        (Filtered results)
                    </div>
                }
            </div>
        </div>
    </div>

    @if (Model.Transactions.Any())
    {
        <!-- Enhanced Summary Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8 animate-slide-in">
            <div class="bg-green-50 rounded-lg p-6 border border-green-200">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 11l5-5m0 0l5 5m-5-5v12"/>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-green-600">Total Income</p>
                        <p class="text-2xl font-bold text-green-900">@Model.TotalIncome.ToString("C")</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-red-50 rounded-lg p-6 border border-red-200">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-red-500 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 13l-5 5m0 0l-5-5m5 5V6"/>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-red-600">Total Expenses</p>
                        <p class="text-2xl font-bold text-red-900">@Model.TotalExpenses.ToString("C")</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-blue-50 rounded-lg p-6 border border-blue-200">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-blue-600">Net Total</p>
                        <p class="text-2xl font-bold @((Model.TotalIncome - Model.TotalExpenses) >= 0 ? "text-green-900" : "text-red-900")">
                            @((Model.TotalIncome - Model.TotalExpenses).ToString("C"))
                        </p>
                    </div>
                </div>
            </div>
            
            <div class="bg-purple-50 rounded-lg p-6 border border-purple-200">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-purple-500 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2V7z"/>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-purple-600">Filtered Net</p>
                        <p class="text-2xl font-bold @((Model.FilteredIncome - Model.FilteredExpenses) >= 0 ? "text-green-900" : "text-red-900")">
                            @((Model.FilteredIncome - Model.FilteredExpenses).ToString("C"))
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Transactions Table -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden animate-slide-in">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button type="button" onclick="sortBy('Date')" class="flex items-center space-x-1 hover:text-gray-700">
                                    <span>Date</span>
                                    @if (Model.SortBy == "Date")
                                    {
                                        @if (Model.SortDirection == "asc")
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"/>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        }
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button type="button" onclick="sortBy('Description')" class="flex items-center space-x-1 hover:text-gray-700">
                                    <span>Description</span>
                                    @if (Model.SortBy == "Description")
                                    {
                                        @if (Model.SortDirection == "asc")
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"/>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        }
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button type="button" onclick="sortBy('Category')" class="flex items-center space-x-1 hover:text-gray-700">
                                    <span>Category</span>
                                    @if (Model.SortBy == "Category")
                                    {
                                        @if (Model.SortDirection == "asc")
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"/>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        }
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button type="button" onclick="sortBy('Account')" class="flex items-center space-x-1 hover:text-gray-700">
                                    <span>Account</span>
                                    @if (Model.SortBy == "Account")
                                    {
                                        @if (Model.SortDirection == "asc")
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"/>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        }
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button type="button" onclick="sortBy('Type')" class="flex items-center space-x-1 hover:text-gray-700">
                                    <span>Type</span>
                                    @if (Model.SortBy == "Type")
                                    {
                                        @if (Model.SortDirection == "asc")
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"/>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        }
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <button type="button" onclick="sortBy('Amount')" class="flex items-center space-x-1 hover:text-gray-700">
                                    <span>Amount</span>
                                    @if (Model.SortBy == "Amount")
                                    {
                                        @if (Model.SortDirection == "asc")
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"/>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        }
                                    }
                                </button>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var transaction in Model.Transactions)
                        {
                            <tr class="hover:bg-gray-50 transition-colors duration-150">
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    <div class="font-medium">@transaction.Date.ToString("MMM dd, yyyy")</div>
                                    <div class="text-xs text-gray-500">@transaction.Date.ToString("HH:mm")</div>
                                </td>
                                <td class="px-6 py-4 text-sm text-gray-900">
                                    <div class="font-medium">@transaction.Description</div>
                                    @if (!string.IsNullOrEmpty(transaction.Notes))
                                    {
                                        <div class="text-gray-500 text-xs mt-1 max-w-xs truncate" title="@transaction.Notes">@transaction.Notes</div>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                        @(transaction.Category?.Name ?? "Uncategorized")
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    <div class="font-medium">@(transaction.Account?.Name ?? "Unknown")</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(transaction.Type == TransactionType.Income ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                        @transaction.Type.ToString()
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <span class="@(transaction.Type == TransactionType.Income ? "text-green-600" : "text-red-600") font-semibold">
                                        @(transaction.Type == TransactionType.Income ? "+" : "-")@transaction.Amount.ToString("C")
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <div class="flex space-x-2">
                                        <a asp-action="Edit" asp-route-id="@transaction.Id" 
                                           class="text-indigo-600 hover:text-indigo-900 transition-colors duration-150"
                                           title="Edit transaction">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                                            </svg>
                                        </a>
                                        <button type="button" onclick="confirmDelete(@transaction.Id)" 
                                                class="text-red-600 hover:text-red-900 transition-colors duration-150"
                                                title="Delete transaction">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                            </svg>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-6 rounded-lg shadow-sm animate-slide-in">
                <div class="flex-1 flex justify-between sm:hidden">
                    @if (Model.HasPreviousPage)
                    {
                        <a href="@Url.Action("Index", new { 
                            page = Model.CurrentPage - 1, 
                            pageSize = Model.PageSize,
                            accountId = Model.SelectedAccountId,
                            categoryId = Model.SelectedCategoryId,
                            type = Model.SelectedType,
                            fromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                            toDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                            searchTerm = Model.SearchTerm,
                            minAmount = Model.MinAmount,
                            maxAmount = Model.MaxAmount,
                            sortBy = Model.SortBy,
                            sortDirection = Model.SortDirection
                        })" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            Previous
                        </a>
                    }
                    else
                    {
                        <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-400 bg-gray-100 cursor-not-allowed">
                            Previous
                        </span>
                    }
                    
                    @if (Model.HasNextPage)
                    {
                        <a href="@Url.Action("Index", new { 
                            page = Model.CurrentPage + 1, 
                            pageSize = Model.PageSize,
                            accountId = Model.SelectedAccountId,
                            categoryId = Model.SelectedCategoryId,
                            type = Model.SelectedType,
                            fromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                            toDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                            searchTerm = Model.SearchTerm,
                            minAmount = Model.MinAmount,
                            maxAmount = Model.MaxAmount,
                            sortBy = Model.SortBy,
                            sortDirection = Model.SortDirection
                        })" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            Next
                        </a>
                    }
                    else
                    {
                        <span class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-400 bg-gray-100 cursor-not-allowed">
                            Next
                        </span>
                    }
                </div>
                
                <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                    <div>
                        <p class="text-sm text-gray-700">
                            Showing page <span class="font-medium">@Model.CurrentPage</span> of <span class="font-medium">@Model.TotalPages</span>
                        </p>
                    </div>
                    
                    <div>
                        <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                            @if (Model.HasPreviousPage)
                            {
                                <a href="@Url.Action("Index", new { 
                                    page = Model.CurrentPage - 1, 
                                    pageSize = Model.PageSize,
                                    accountId = Model.SelectedAccountId,
                                    categoryId = Model.SelectedCategoryId,
                                    type = Model.SelectedType,
                                    fromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    toDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    searchTerm = Model.SearchTerm,
                                    minAmount = Model.MinAmount,
                                    maxAmount = Model.MaxAmount,
                                    sortBy = Model.SortBy,
                                    sortDirection = Model.SortDirection
                                })" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                    <span class="sr-only">Previous</span>
                                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                            }
                            else
                            {
                                <span class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400 cursor-not-allowed">
                                    <span class="sr-only">Previous</span>
                                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </span>
                            }
                            
                            @{
                                var startPage = Math.Max(1, Model.CurrentPage - 2);
                                var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                            }
                            
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                @if (i == Model.CurrentPage)
                                {
                                    <span class="relative inline-flex items-center px-4 py-2 border border-indigo-500 bg-indigo-50 text-sm font-medium text-indigo-600">
                                        @i
                                    </span>
                                }
                                else
                                {
                                    <a href="@Url.Action("Index", new { 
                                        page = i, 
                                        pageSize = Model.PageSize,
                                        accountId = Model.SelectedAccountId,
                                        categoryId = Model.SelectedCategoryId,
                                        type = Model.SelectedType,
                                        fromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                        toDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                        searchTerm = Model.SearchTerm,
                                        minAmount = Model.MinAmount,
                                        maxAmount = Model.MaxAmount,
                                        sortBy = Model.SortBy,
                                        sortDirection = Model.SortDirection
                                    })" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                                        @i
                                    </a>
                                }
                            }
                            
                            @if (Model.HasNextPage)
                            {
                                <a href="@Url.Action("Index", new { 
                                    page = Model.CurrentPage + 1, 
                                    pageSize = Model.PageSize,
                                    accountId = Model.SelectedAccountId,
                                    categoryId = Model.SelectedCategoryId,
                                    type = Model.SelectedType,
                                    fromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    toDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    searchTerm = Model.SearchTerm,
                                    minAmount = Model.MinAmount,
                                    maxAmount = Model.MaxAmount,
                                    sortBy = Model.SortBy,
                                    sortDirection = Model.SortDirection
                                })" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                    <span class="sr-only">Next</span>
                                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                            }
                            else
                            {
                                <span class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400 cursor-not-allowed">
                                    <span class="sr-only">Next</span>
                                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </span>
                            }
                        </nav>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="text-center py-12 animate-fade-in">
            <div class="w-24 h-24 mx-auto mb-4 text-gray-400">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">
                @if (Model.FromDate.HasValue || Model.ToDate.HasValue || !string.IsNullOrEmpty(Model.SearchTerm) || Model.SelectedAccountId.HasValue || Model.SelectedCategoryId.HasValue || !string.IsNullOrEmpty(Model.SelectedType))
                {
                    <span>No transactions match your filters</span>
                }
                else
                {
                    <span>No transactions yet</span>
                }
            </h3>
            <p class="text-gray-600 mb-6">
                @if (Model.FromDate.HasValue || Model.ToDate.HasValue || !string.IsNullOrEmpty(Model.SearchTerm) || Model.SelectedAccountId.HasValue || Model.SelectedCategoryId.HasValue || !string.IsNullOrEmpty(Model.SelectedType))
                {
                    <span>Try adjusting your search criteria or clear all filters</span>
                }
                else
                {
                    <span>Start tracking your income and expenses</span>
                }
            </p>
            <a asp-action="Create" class="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200">
                Add Your First Transaction
            </a>
        </div>
    }
</div>

<!-- JavaScript for enhanced functionality -->
<script>
    function sortBy(column) {
        const form = document.getElementById('filterForm');
        const sortByInput = form.querySelector('input[name="sortBy"]');
        const sortDirectionInput = form.querySelector('input[name="sortDirection"]');
        
        if (sortByInput.value === column) {
            sortDirectionInput.value = sortDirectionInput.value === 'asc' ? 'desc' : 'asc';
        } else {
            sortByInput.value = column;
            sortDirectionInput.value = 'asc';
        }
        
        form.submit();
    }
    
    function confirmDelete(transactionId) {
        if (confirm('Are you sure you want to delete this transaction? This action cannot be undone.')) {
            // Create and submit a delete form
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '@Url.Action("Delete")/' + transactionId;
            
            // Add CSRF token
            const csrfInput = document.createElement('input');
            csrfInput.type = 'hidden';
            csrfInput.name = '__RequestVerificationToken';
            csrfInput.value = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            form.appendChild(csrfInput);
            
            document.body.appendChild(form);
            form.submit();
        }
    }
    
    // Auto-submit form when page size changes
    document.querySelector('select[name="pageSize"]')?.addEventListener('change', function() {
        document.getElementById('filterForm').submit();
    });
    
    // Add loading state to buttons
    document.addEventListener('DOMContentLoaded', function() {
        const forms = document.querySelectorAll('form');
        forms.forEach(form => {
            form.addEventListener('submit', function() {
                const submitButton = form.querySelector('button[type="submit"]');
                if (submitButton) {
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<span class="flex items-center"><svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Loading...</span>';
                }
            });
        });
    });
</script>

<!-- Add CSS animations -->
<style>
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }
    
    .animate-slide-in {
        animation: slideIn 0.6s ease-out;
    }
    
    .transition-colors {
        transition-property: color, background-color, border-color;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 150ms;
    }
</style>
