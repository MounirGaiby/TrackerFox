@model PersonalFinanceTracker.ViewModels.ForexDetailsViewModel

@{
    ViewData["Title"] = $"{Model.FromCurrency}/{Model.ToCurrency} - Forex Details";
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="mb-8">
        <a href="@Url.Action("Index", "Markets")" class="text-indigo-600 hover:text-indigo-900 flex items-center">
            <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Markets
        </a>
    </div>

    <div class="bg-white overflow-hidden shadow rounded-lg mb-8">
        <div class="px-4 py-5 sm:px-6 flex justify-between items-center">
            <div>
                <h2 class="text-2xl font-bold text-gray-900">
                    @Model.FromCurrency/@Model.ToCurrency
                </h2>
                <p class="text-sm text-gray-500">
                    Currency Pair
                </p>
            </div>
            <div class="text-right">
                <div class="text-3xl font-bold @(Model.Change >= 0 ? "text-green-600" : "text-red-600")">
                    @Model.Rate.ToString("N4")
                </div>
                <div class="flex items-center justify-end @(Model.Change >= 0 ? "text-green-600" : "text-red-600")">
                    @if (Model.Change >= 0)
                    {
                        <svg class="h-5 w-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                        </svg>
                    }
                    else
                    {
                        <svg class="h-5 w-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    }
                    <span>@Model.Change.ToString("N4") (@Model.PercentChange.ToString("N2")%)</span>
                </div>
            </div>
        </div>
        <div class="border-t border-gray-200 px-4 py-5 sm:p-0">
            <dl class="sm:divide-y sm:divide-gray-200">
                <div class="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt class="text-sm font-medium text-gray-500">Open</dt>
                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Model.Open.ToString("N4")</dd>
                </div>
                <div class="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt class="text-sm font-medium text-gray-500">High</dt>
                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Model.High.ToString("N4")</dd>
                </div>
                <div class="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt class="text-sm font-medium text-gray-500">Low</dt>
                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Model.Low.ToString("N4")</dd>
                </div>
                <div class="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt class="text-sm font-medium text-gray-500">Previous Close</dt>
                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Model.PreviousClose.ToString("N4")</dd>
                </div>
            </dl>
        </div>
    </div>

    <div class="bg-white overflow-hidden shadow rounded-lg mb-8">
        <div class="px-4 py-5 sm:px-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900">
                Historical Data
            </h3>
        </div>
        <div class="border-t border-gray-200 px-4 py-5 sm:p-6">
            <div class="flex justify-end mb-4">
                <div class="inline-flex shadow-sm rounded-md">
                    <button type="button" class="interval-btn relative inline-flex items-center px-4 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500" data-interval="7">1W</button>
                    <button type="button" class="interval-btn relative inline-flex items-center px-4 py-2 border-t border-b border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500" data-interval="30">1M</button>
                    <button type="button" class="interval-btn relative inline-flex items-center px-4 py-2 border-t border-b border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500" data-interval="90">3M</button>
                    <button type="button" class="interval-btn relative inline-flex items-center px-4 py-2 border-t border-b border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500" data-interval="180">6M</button>
                    <button type="button" class="interval-btn relative inline-flex items-center px-4 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 active" data-interval="365">1Y</button>
                </div>
            </div>
            <canvas id="forexChart" class="w-full" height="400"></canvas>
        </div>
    </div>

    <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="px-4 py-5 sm:px-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900">
                About this Currency Pair
            </h3>
        </div>
        <div class="border-t border-gray-200 px-4 py-5 sm:p-6">
            <p class="text-base text-gray-700 mb-4">
                The @Model.FromCurrency/@Model.ToCurrency pair represents the exchange rate between the @GetCurrencyName(Model.FromCurrency) and the @GetCurrencyName(Model.ToCurrency). The rate shown indicates how much @Model.ToCurrency you can buy with 1 @Model.FromCurrency.
            </p>
            <p class="text-base text-gray-700 mb-4">
                This currency pair is affected by the economic conditions in both countries/regions, including interest rates, inflation, trade balances, and political stability.
            </p>
            <div class="border-t border-gray-200 pt-4 mt-4">
                <h4 class="text-md font-medium text-gray-900 mb-2">Trading Information</h4>
                <ul class="list-disc pl-5 text-sm text-gray-700">
                    <li>Standard lot size: 100,000 units</li>
                    <li>Mini lot size: 10,000 units</li>
                    <li>Micro lot size: 1,000 units</li>
                    <li>Typical spread: @GetTypicalSpread(Model.FromCurrency, Model.ToCurrency) pips</li>
                    <li>Trading hours: 24 hours, 5 days a week (Sunday 5 PM ET to Friday 5 PM ET)</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Get historical data from ViewBag
        const historicalData = @Html.Raw(ViewBag.HistoricalDataJson);
        let dates = [];
        let rates = [];
        
        // Process all data initially
        historicalData.forEach(item => {
            dates.push(new Date(item.date).toLocaleDateString());
            rates.push(item.close);
        });
        
        // Create the chart
        const ctx = document.getElementById('forexChart');
        const forexChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: '@Model.FromCurrency/@Model.ToCurrency Rate',
                    data: rates,
                    borderColor: 'rgba(99, 102, 241, 1)',
                    backgroundColor: 'rgba(99, 102, 241, 0.1)',
                    fill: true,
                    tension: 0.3
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            label: function(context) {
                                return `Rate: ${context.raw.toFixed(4)}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        ticks: {
                            callback: function(value) {
                                return value.toFixed(4);
                            }
                        }
                    }
                }
            }
        });
        
        // Handle time interval buttons
        document.querySelectorAll('.interval-btn').forEach(button => {
            button.addEventListener('click', function() {
                const interval = parseInt(this.getAttribute('data-interval'));
                
                // Update active button
                document.querySelectorAll('.interval-btn').forEach(btn => {
                    btn.classList.remove('active', 'bg-indigo-50', 'text-indigo-700');
                    btn.classList.add('bg-white', 'text-gray-700');
                });
                this.classList.add('active', 'bg-indigo-50', 'text-indigo-700');
                this.classList.remove('bg-white', 'text-gray-700');
                
                // Filter data based on interval
                const filteredData = historicalData.slice(-interval);
                
                // Update chart
                forexChart.data.labels = filteredData.map(item => new Date(item.date).toLocaleDateString());
                forexChart.data.datasets[0].data = filteredData.map(item => item.close);
                forexChart.update();
            });
        });
    </script>
}

@functions {
    public string GetCurrencyName(string code)
    {
        return code switch
        {
            "USD" => "US Dollar",
            "EUR" => "Euro",
            "GBP" => "British Pound",
            "JPY" => "Japanese Yen",
            "CAD" => "Canadian Dollar",
            "AUD" => "Australian Dollar",
            "CHF" => "Swiss Franc",
            "CNY" => "Chinese Yuan",
            "INR" => "Indian Rupee",
            _ => code
        };
    }
    
    public string GetTypicalSpread(string from, string to)
    {
        return (from, to) switch
        {
            ("USD", "EUR") => "0.9",
            ("USD", "GBP") => "1.2",
            ("USD", "JPY") => "1.0",
            ("USD", "CAD") => "1.5",
            ("EUR", "USD") => "0.9",
            ("EUR", "GBP") => "1.8",
            ("GBP", "USD") => "1.2",
            ("GBP", "EUR") => "1.8",
            _ => "2.0"
        };
    }
}
