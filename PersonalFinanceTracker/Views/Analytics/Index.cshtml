@using PersonalFinanceTracker.Models
@using PersonalFinanceTracker.ViewModels
@using System.Globalization
@model AnalyticsViewModel
@{
    ViewData["Title"] = "Financial Analytics";
    var cultureInfo = CultureInfo.InvariantCulture; // For consistent number formatting in JavaScript
}

<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
        <h1 class="text-3xl font-bold text-gray-800 dark:text-white">Financial Analytics</h1>
        <div class="flex flex-wrap items-center gap-2 md:gap-4">
            <!-- Date Range Filter -->
            <div class="flex items-center gap-2">
                <label for="startDate" class="text-sm font-medium text-gray-700 dark:text-gray-300">From:</label>
                <input type="date" id="startDate" name="startDate"
                       class="form-input block w-full sm:w-auto rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                       value="@Model.StartDate.ToString("yyyy-MM-dd")">
            </div>
            <div class="flex items-center gap-2">
                <label for="endDate" class="text-sm font-medium text-gray-700 dark:text-gray-300">To:</label>
                <input type="date" id="endDate" name="endDate"
                       class="form-input block w-full sm:w-auto rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                       value="@Model.EndDate.ToString("yyyy-MM-dd")">
            </div>

            <!-- Account Filter -->
            <div class="flex items-center gap-2">
                <label for="accountId" class="text-sm font-medium text-gray-700 dark:text-gray-300">Account:</label>
                <select id="accountId" name="accountId"
                        class="form-select block w-full sm:w-auto rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                    <option value="">All Accounts</option>
                    @foreach (var account in Model.AvailableAccounts)
                    {
                        <option value="@account.Id" selected="@(Model.AccountId == account.Id)">@account.Name</option>
                    }
                </select>
            </div>
            <button id="applyFiltersBtn" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors text-sm font-medium">Apply Filters</button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-2">Total Income</h3>
            <p class="text-3xl font-bold text-green-500">@Model.TotalIncome.ToString("C")</p>
        </div>
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-2">Total Expenses</h3>
            <p class="text-3xl font-bold text-red-500">@Model.TotalExpenses.ToString("C")</p>
        </div>
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-2">Net Flow</h3>
            <p class="text-3xl font-bold @(Model.NetFlow >= 0 ? "text-blue-500" : "text-orange-500")">@Model.NetFlow.ToString("C")</p>
        </div>
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-2">Transactions</h3>
            <p class="text-3xl font-bold text-gray-600 dark:text-gray-300">@Model.TotalTransactions</p>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <!-- Spending by Category (Pie Chart) -->
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
            <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Spending by Category</h3>
            <div class="chart-container" style="position: relative; height:40vh; width:100%">
                <canvas id="spendingByCategoryChart"></canvas>
            </div>
        </div>

        <!-- Income vs Expenses (Bar Chart) -->
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
            <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Income vs. Expenses Trend</h3>
             <div class="chart-container" style="position: relative; height:40vh; width:100%">
                <canvas id="incomeVsExpensesChart"></canvas>
            </div>
        </div>
    </div>
    
    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg mb-8">
        <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Cash Flow Over Time</h3>
        <div class="chart-container" style="position: relative; height:40vh; width:100%">
            <canvas id="cashFlowChart"></canvas>
        </div>
    </div>


    <!-- Recent Transactions Table -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
        <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Recent Transactions</h3>
        @if (Model.RecentTransactions.Any())
        {
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="bg-gray-50 dark:bg-gray-700">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Date</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Description</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Category</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Account</th>
                            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Amount</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        @foreach (var transaction in Model.RecentTransactions)
                        {
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">@transaction.Date.ToString("yyyy-MM-dd")</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">@transaction.Description</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">@transaction.Category?.Name</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">@transaction.Account?.Name</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-right @(transaction.Type == TransactionType.Income ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400")">
                                    @(transaction.Type == TransactionType.Income ? "+" : "-")@transaction.Amount.ToString("N2", cultureInfo)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-gray-500 dark:text-gray-400">No transactions found for the selected period.</p>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Chart instances
            let spendingByCategoryChartInstance;
            let incomeVsExpensesChartInstance;
            let cashFlowChartInstance;

            // Default Chart Colors (Tailwind-like)
            const chartColors = {
                primary: 'rgba(79, 70, 229, 0.8)', // indigo-600
                secondary: 'rgba(239, 68, 68, 0.8)', // red-500
                tertiary: 'rgba(34, 197, 94, 0.8)', // green-500
                neutral: 'rgba(107, 114, 128, 0.8)', // gray-500
                pieSliceColors: [
                    'rgba(59, 130, 246, 0.7)', 'rgba(239, 68, 68, 0.7)', 'rgba(245, 158, 11, 0.7)',
                    'rgba(16, 185, 129, 0.7)', 'rgba(139, 92, 246, 0.7)', 'rgba(236, 72, 153, 0.7)',
                    'rgba(99, 102, 241, 0.7)', 'rgba(244, 63, 94, 0.7)', 'rgba(251, 146, 60, 0.7)',
                    'rgba(34, 197, 94, 0.7)', 'rgba(124, 58, 237, 0.7)', 'rgba(219, 39, 119, 0.7)'
                ]
            };
            
            const commonChartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: document.body.classList.contains('dark') ? '#D1D5DB' : '#374151', // gray-300 or gray-700
                            font: { size: 12 }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: document.body.classList.contains('dark') ? '#9CA3AF' : '#4B5563', // gray-400 or gray-600
                             font: { size: 10 }
                        },
                        grid: {
                            color: document.body.classList.contains('dark') ? 'rgba(75, 85, 99, 0.5)' : 'rgba(229, 231, 235, 0.5)' // gray-600 or gray-200
                        }
                    },
                    y: {
                        ticks: {
                            color: document.body.classList.contains('dark') ? '#9CA3AF' : '#4B5563',
                            font: { size: 10 },
                            callback: function(value) { return '$' + value.toLocaleString(); }
                        },
                        grid: {
                            color: document.body.classList.contains('dark') ? 'rgba(75, 85, 99, 0.5)' : 'rgba(229, 231, 235, 0.5)'
                        }
                    }
                }
            };


            function createSpendingByCategoryChart(data) {
                const ctx = document.getElementById('spendingByCategoryChart').getContext('2d');
                if (spendingByCategoryChartInstance) {
                    spendingByCategoryChartInstance.destroy();
                }
                if (!data || data.length === 0) {
                    // Display a message if no data
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                    ctx.textAlign = 'center';
                    ctx.fillStyle = document.body.classList.contains('dark') ? '#9CA3AF' : '#6B7280';
                    ctx.font = '16px Arial';
                    ctx.fillText('No spending data for selected period.', ctx.canvas.width / 2, ctx.canvas.height / 2);
                    return;
                }
                spendingByCategoryChartInstance = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: data.map(item => item.categoryName),
                        datasets: [{
                            label: 'Spending',
                            data: data.map(item => item.totalAmount),
                            backgroundColor: chartColors.pieSliceColors,
                            borderColor: document.body.classList.contains('dark') ? '#374151' : '#FFFFFF', // gray-700 or white
                            borderWidth: 1
                        }]
                    },
                    options: {
                        ...commonChartOptions,
                        plugins: {
                            ...commonChartOptions.plugins,
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed !== null) {
                                            label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed);
                                        }
                                        const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                        const percentage = total > 0 ? ((context.parsed / total) * 100).toFixed(2) : 0;
                                        label += ` (${percentage}%)`;
                                        return label;
                                    }
                                }
                            }
                        },
                        scales: {} // No scales for pie chart
                    }
                });
            }

            function createIncomeVsExpensesChart(data) {
                const ctx = document.getElementById('incomeVsExpensesChart').getContext('2d');
                 if (incomeVsExpensesChartInstance) {
                    incomeVsExpensesChartInstance.destroy();
                }
                if (!data || !data.labels || data.labels.length === 0) {
                     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                    ctx.textAlign = 'center';
                    ctx.fillStyle = document.body.classList.contains('dark') ? '#9CA3AF' : '#6B7280';
                    ctx.font = '16px Arial';
                    ctx.fillText('No income/expense data for trend analysis.', ctx.canvas.width / 2, ctx.canvas.height / 2);
                    return;
                }
                incomeVsExpensesChartInstance = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.labels, // e.g., ['Jan', 'Feb', 'Mar']
                        datasets: [
                            {
                                label: 'Total Income',
                                data: data.incomeData,
                                backgroundColor: chartColors.tertiary,
                                borderColor: 'rgba(34, 197, 94, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Total Expenses',
                                data: data.expenseData,
                                backgroundColor: chartColors.secondary,
                                borderColor: 'rgba(239, 68, 68, 1)',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        ...commonChartOptions,
                         scales: {
                             x: {
                                ...commonChartOptions.scales.x,
                                title: { display: true, text: 'Month', color: commonChartOptions.scales.x.ticks.color }
                            },
                            y: {
                                ...commonChartOptions.scales.y,
                                title: { display: true, text: 'Amount (USD)', color: commonChartOptions.scales.y.ticks.color }
                            }
                        }
                    }
                });
            }
            
            function createCashFlowChart(data) {
                const ctx = document.getElementById('cashFlowChart').getContext('2d');
                if (cashFlowChartInstance) {
                    cashFlowChartInstance.destroy();
                }
                 if (!data || !data.labels || data.labels.length === 0) {
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                    ctx.textAlign = 'center';
                    ctx.fillStyle = document.body.classList.contains('dark') ? '#9CA3AF' : '#6B7280';
                    ctx.font = '16px Arial';
                    ctx.fillText('No data for cash flow analysis.', ctx.canvas.width / 2, ctx.canvas.height / 2);
                    return;
                }
                cashFlowChartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.labels, // Dates
                        datasets: [{
                            label: 'Cash Flow (Income - Expenses)',
                            data: data.cashFlowData,
                            borderColor: chartColors.primary,
                            backgroundColor: 'rgba(79, 70, 229, 0.1)', // Lighter fill
                            fill: true,
                            tension: 0.1
                        }]
                    },
                    options: {
                        ...commonChartOptions,
                        scales: {
                            x: {
                                ...commonChartOptions.scales.x,
                                type: 'time',
                                time: {
                                    unit: 'day', // Adjust based on data density (e.g., 'month', 'week')
                                     tooltipFormat: 'MMM dd, yyyy',
                                    displayFormats: {
                                        day: 'MMM dd'
                                    }
                                },
                                title: { display: true, text: 'Date', color: commonChartOptions.scales.x.ticks.color }
                            },
                            y: {
                                ...commonChartOptions.scales.y,
                                title: { display: true, text: 'Net Cash Flow (USD)', color: commonChartOptions.scales.y.ticks.color }
                            }
                        },
                        plugins: {
                             ...commonChartOptions.plugins,
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                                callbacks: {
                                     label: function(context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.y !== null) {
                                            label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
                                        }
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            }

            // Initial chart data load
            createSpendingByCategoryChart(@Html.Raw(Json.Serialize(Model.SpendingByCategoryChart.Data)));
            createIncomeVsExpensesChart(@Html.Raw(Json.Serialize(Model.IncomeVsExpenseChart.Data)));
            createCashFlowChart(@Html.Raw(Json.Serialize(Model.CashFlowChart.Data)));


            // Filter logic
            document.getElementById('applyFiltersBtn').addEventListener('click', function () {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                const accountId = document.getElementById('accountId').value;
                
                // Construct URL with query parameters
                let url = `@Url.Action("UpdateCharts", "Analytics")?startDate=${startDate}&endDate=${endDate}`;
                if (accountId) {
                    url += `&accountId=${accountId}`;
                }
                
                // console.log("Fetching new chart data from:", url);

                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(data => {
                        // console.log("Received new chart data:", data);
                        // Update summary cards
                        document.querySelector('.grid div:nth-child(1) p').textContent = parseFloat(data.totalIncome).toLocaleString('en-US', { style: 'currency', currency: 'USD' });
                        document.querySelector('.grid div:nth-child(2) p').textContent = parseFloat(data.totalExpenses).toLocaleString('en-US', { style: 'currency', currency: 'USD' });
                        const netFlowEl = document.querySelector('.grid div:nth-child(3) p');
                        netFlowEl.textContent = parseFloat(data.netFlow).toLocaleString('en-US', { style: 'currency', currency: 'USD' });
                        netFlowEl.className = `text-3xl font-bold ${data.netFlow >= 0 ? "text-blue-500" : "text-orange-500"}`;
                        document.querySelector('.grid div:nth-child(4) p').textContent = data.totalTransactions;

                        // Update charts
                        createSpendingByCategoryChart(data.spendingByCategoryChart.data);
                        createIncomeVsExpensesChart(data.incomeVsExpenseChart.data);
                        createCashFlowChart(data.cashFlowChart.data);
                        
                        // Update recent transactions table (simplified: reloads the whole page for this part or implement AJAX table update)
                        // For simplicity, we can just inform the user or they will see it on next full page load.
                        // A more robust solution would be to fetch and re-render the table via JS.
                        // This example focuses on chart updates.
                        // Let's reload the page with new query parameters to update everything including the table.
                        const queryParams = new URLSearchParams({
                            startDate: startDate,
                            endDate: endDate,
                            accountId: accountId
                        });
                        window.location.search = queryParams.toString();


                    })
                    .catch(error => {
                        console.error('Error fetching updated chart data:', error);
                        // You could display an error message to the user here
                        alert('Failed to update analytics data. Please try again.');
                    });
            });
            
            // Theme switcher awareness for charts
            const observer = new MutationObserver((mutationsList) => {
                for (const mutation of mutationsList) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                        // Re-render charts with updated theme options
                        // This is a simplified approach. A more robust solution might involve
                        // updating chart options directly without full re-render if Chart.js supports it easily.
                        if (spendingByCategoryChartInstance) {
                             spendingByCategoryChartInstance.options = {...spendingByCategoryChartInstance.options, ...getUpdatedThemeOptions() };
                             spendingByCategoryChartInstance.update();
                        }
                        if (incomeVsExpensesChartInstance) {
                            incomeVsExpensesChartInstance.options = {...incomeVsExpensesChartInstance.options, ...getUpdatedThemeOptions() };
                            incomeVsExpensesChartInstance.update();
                        }
                        if (cashFlowChartInstance) {
                            cashFlowChartInstance.options = {...cashFlowChartInstance.options, ...getUpdatedThemeOptions() };
                            cashFlowChartInstance.update();
                        }
                    }
                }
            });

            observer.observe(document.body, { attributes: true });

            function getUpdatedThemeOptions() {
                const isDarkMode = document.body.classList.contains('dark');
                return {
                    plugins: {
                        legend: {
                            labels: { color: isDarkMode ? '#D1D5DB' : '#374151' }
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: isDarkMode ? '#9CA3AF' : '#4B5563' },
                            grid: { color: isDarkMode ? 'rgba(75, 85, 99, 0.5)' : 'rgba(229, 231, 235, 0.5)' }
                        },
                        y: {
                            ticks: { color: isDarkMode ? '#9CA3AF' : '#4B5563' },
                            grid: { color: isDarkMode ? 'rgba(75, 85, 99, 0.5)' : 'rgba(229, 231, 235, 0.5)' }
                        }
                    }
                };
            }

        });
    </script>
}
